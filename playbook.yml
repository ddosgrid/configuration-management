 - name: Playbook to install tools for deployment
   become: true
   hosts: all
   roles:
    - geerlingguy.docker

   vars_prompt:
    - name: fqdn
      prompt: What is the fully qualified domain name (FQDN)?
      private: no
      default: 'test.vonderassen.com'

   tasks:
     - name: Print FQDN
       ansible.builtin.debug:
        msg: 'Deploying DDoSGrid stack for {{ fqdn }}'

     # Dependencies for provisioning
     - name: Install git, pip, python-docker
       no_log: true
       apt:
         name: git,  python3-pip, python-docker
         state: present
     - name: Pip install python docker-compose
       no_log: true
       pip:
         name: docker-compose, requests
         executable: pip3

     # Checking out sources
     - name: Checkout "DDoSDB" from GitHub
       git:
         repo: 'https://github.com/ddosgrid/ddosdb.git'
         force: yes
         dest: /srv/ddosdb
     - name: Checkout "DDoSGrid" from GitHub
       git:
         repo: 'https://github.com/ddosgrid/ddosgrid-v2.git'
         force: yes
         dest: /srv/ddosgrid-v2
     - name: Checkout "ddos_dissector" from GitHub into DDoSGrid
       git:
         repo: 'https://github.com/ddosgrid/ddos_dissector'
         dest: /srv/ddosgrid-v2/ddos_dissector
     - name: Checkout "converters" from GitHub into DDoSGrid
       git:
         repo: 'https://github.com/ddosgrid/converters'
         dest: /srv/ddosgrid-v2/converters
     - name: Checkout "HTTPS reverse proxy" from GitHub into DDoSGrid
       git:
         repo: 'https://github.com/ddosgrid/https-reverse-proxy.git'
         force: yes
         dest: /srv/proxy

     # Setup SSL
     - name: Replace SSL certificate
       copy:
         src: ./assets/certificate.cert
         dest: /srv/proxy/cert/certificate.cer
     - name: Replace SSL certificate key
       copy:
         src: ./assets/certificate.key
         dest: /srv/proxy/cert/certificate.key


     # Start services
     - name: Start proxy service
       shell: |
         cd /srv/proxy && docker-compose up -d
     - name: Start ddosdb service
       shell: |
         cd /srv/ddosdb && docker-compose up -d

     # Housekeeping
     - name: Create ElasticSearch index
       shell: |
         docker exec ddosdb_housekeeping_1 sh -l -c "sleep 30; /app/ddosdb-docker.db"

     - name: Create PW using OpenSSL
       shell: openssl rand -hex 12
       register: pw

     - name: Create super user in DDoSDB
       shell: |
         docker exec ddosdb sh -l -c "DJANGO_SUPERUSER_PASSWORD={{ pw.stdout }} python manage.py createsuperuser --noinput --username test --email test@test.com"
       register: createsuperuser
       ignore_errors: yes




     # Create OAuth app in DDoSDB
     - name: Generate 32 random bytes for client ID
       shell: |
         openssl rand -hex 32
       register: rand_xybit_nr
     - name: Generate 127 random bytes for client secret
       shell: |
         openssl rand -hex 127 
       register: rand_yzbit_nr
     - name: Pick only stdout and store client ID and secret
       set_fact:
         ddosdb_client_id={{ rand_xybit_nr.stdout }}
         ddosdb_client_secret={{ rand_yzbit_nr.stdout }}
     - name: Register new OAuth app within DDoSDB
       ansible.builtin.script: |
          makeouathapp.py {{ ddosdb_client_id }} {{ ddosdb_client_secret }} \
          https://{{fqdn}}/ddosgrid/api/auth/provider/callback/ {{fqdn}} test \
          {{ pw.stdout }}  https://{{fqdn}}/ddosgrid/ddosdb
       args:
         executable: python3


     # Configure domain name
     - name: Render FQDN into compose file
       ansible.builtin.template:
         src: ./templates/docker-compose-ddosgrid.yml
         dest: /srv/ddosgrid-v2/docker-compose.yml
     - name: Render FQDN into frontend env file
       ansible.builtin.template:
         src: ./templates/frontend-env-production
         dest: /srv/ddosgrid-v2/frontend/.env.production
     
     # Start service
     - name: Start ddosgrid service
       shell: |
         cd /srv/ddosgrid-v2 && docker-compose up -d

     - name: Print next steps
       ansible.builtin.debug:
         msg: 'IMPORTANT: All components have been setup and your user was created. You can login and change the password on https://{{ fqdn }}/ddosgrid/ddosdb/admin  [Username] test [Password] {{ pw.stdout }}'
